import geopandas as gpd
import matplotlib.pyplot as plt
import numpy as np
from shapely.geometry import Polygon, box, MultiPolygon
from typing import List

def split_area_equivalent_area(coords: List[List[float]], n_splits: int, area_name: str):
    polygon = Polygon(coords)

    if not polygon.is_valid:
        polygon = polygon.buffer(0)

    minx, miny, maxx, maxy = polygon.bounds
    best_x, best_y, best_ratio = None, None, float('inf')

    # Trouver la meilleure grille (cellules les plus carrées)
    for x in range(1, n_splits + 1):
        y = int(np.ceil(n_splits / x))
        if x * y >= n_splits:
            cell_width = (maxx - minx) / x
            cell_height = (maxy - miny) / y
            ratio = max(cell_width / cell_height, cell_height / cell_width)
            if ratio < best_ratio:
                best_ratio = ratio
                best_x, best_y = x, y

    x_splits, y_splits = best_x, best_y
    x_step = (maxx - minx) / x_splits
    y_step = (maxy - miny) / y_splits

    grid = []
    for i in range(x_splits):
        for j in range(y_splits):
            x_start = minx + i * x_step
            x_end = x_start + x_step
            y_start = miny + j * y_step
            y_end = y_start + y_step
            grid.append(box(x_start, y_start, x_end, y_end))

    # Intersections
    raw_subpolygons = [polygon.intersection(cell) for cell in grid if polygon.intersects(cell)]

    subpolygons = []
    for geom in raw_subpolygons:
        if isinstance(geom, Polygon):
            subpolygons.append(geom)
        elif isinstance(geom, MultiPolygon):
            subpolygons.extend([p for p in geom.geoms if not p.is_empty])

    if len(subpolygons) < n_splits:
        print(f"⚠️ Seulement {len(subpolygons)} sous-polygones valides générés (demande = {n_splits})")

    subpolygons = subpolygons[:n_splits]  # couper à n_splits

    gdf = gpd.GeoDataFrame(geometry=subpolygons, crs="EPSG:4326")
    gdf.to_file(f"johannesburg_split/{area_name}.geojson", driver="GeoJSON")

    fig, ax = plt.subplots(figsize=(8, 8))
    gdf.plot(ax=ax, color="lightblue", edgecolor="black")

    for idx, row in gdf.iterrows():
        centroid = row.geometry.centroid
        ax.text(centroid.x, centroid.y, str(idx + 1), fontsize=8, ha="center", va="center", color="red")

    ax.set_title("Découpage équivalent en surface")
    ax.set_xlabel("Longitude")
    ax.set_ylabel("Latitude")

    plt.savefig(f"{area_name}.png", dpi=300, bbox_inches="tight")
    plt.close()

    print(f"✅ Plot and GeoJSON saved: {area_name}.png & {area_name}.geojson")


if __name__ == "__main__":
    # Define area
    polygon_coords = [[-26.4796890481111,27.8506951977252],[-26.4819522271136,27.8506786304145],[-26.4819531057512,27.8506786214213],[-26.483572898065,27.8506621938481],[-26.4835742596444,27.8508197133591],[-26.4835759737522,27.851061467313],[-26.4835677557473,27.8511074460518],[-26.483586791697,27.8538200315692],[-26.4835944053574,27.8548574759917],[-26.4835480318162,27.8549926611824],[-26.483551013968,27.855424697292],[-26.483560603439,27.8554247800296],[-26.4835596951238,27.8555460482116],[-26.4835601411875,27.855767382159],[-26.4835363433276,27.8557588323043],[-26.4832393871879,27.8557816750843],[-26.4831480151687,27.8558616248141],[-26.4831594365587,27.8563641668729],[-26.4827489931715,27.8564236111608],[-26.4827774279359,27.8565385571088],[-26.4833732368853,27.8586373661216],[-26.4842011518616,27.8587262757971],[-26.4844655741269,27.8587626335887],[-26.4846374480598,27.8587956872712],[-26.4847366064092,27.858822129138],[-26.4848919517021,27.8588915388135],[-26.4850373837682,27.8589807821374],[-26.4855596182817,27.8594402142945],[-26.4857149662726,27.8595922572769],[-26.4858438696988,27.8597509102763],[-26.4859376536997,27.8598989162021],[-26.4860860454347,27.8598518330956],[-26.4862760820755,27.859778267653],[-26.4866374017946,27.8596477922119],[-26.4870740082588,27.8594972412047],[-26.4875997411352,27.8592943946207],[-26.4876900663435,27.8592703143736],[-26.4877803897532,27.8592402005748],[-26.4878947961079,27.85921009487],[-26.4880453309273,27.85921009487],[-26.4883162957604,27.85921009487],[-26.4884909198201,27.8592161194284],[-26.4888943556899,27.8592341841103],[-26.4891653214223,27.8592582661561],[-26.4893098316833,27.8592522487923],[-26.4894904722075,27.8592402005748],[-26.48976143794,27.85921009487],[-26.48996015124,27.8591799900645],[-26.4901106860592,27.8591257951194],[-26.490225092414,27.8591257951194],[-26.4903515460869,27.8591378361422],[-26.4905261620527,27.8590956903139],[-26.4907308918172,27.8590174142223],[-26.4909235805588,27.858999348641],[-26.4910440105726,27.858993324982],[-26.4911102456413,27.8590294543459],[-26.4912607822593,27.8590475190278],[-26.4914293817605,27.8590294543459],[-26.4916822819117,27.8589752603001],[-26.4918749625594,27.8588969842085],[-26.4920134581545,27.8588367647049],[-26.4921218471455,27.8587404248308],[-26.4921941067726,27.8586802143205],[-26.4923988284431,27.8586320349405],[-26.4926156073244,27.8586440840573],[-26.4928624829172,27.8586862298857],[-26.49307323724,27.858692254444],[-26.4933743068787,27.8587042945676],[-26.4935308671558,27.8586982709085],[-26.4936934429979,27.8586500996224],[-26.4938379541582,27.8586139702586],[-26.4939343021263,27.8585657998718],[-26.4940563068531,27.8584833680131],[-26.4941570893781,27.8584152650525],[-26.4942715029274,27.8583128997206],[-26.4944641835752,27.8581804295832],[-26.4946267684106,27.858120219073],[-26.4948013843764,27.858120219073],[-26.495060309086,27.8581262346381],[-26.4951566489601,27.8581744050249],[-26.4952529978276,27.8581924697068],[-26.4953794443059,27.8581924697068],[-26.4955841740703,27.8582587047754],[-26.4957467499125,27.8582767703567],[-26.495867179027,27.8583550536429],[-26.4959187056837,27.8584627861288],[-26.495933414995,27.858493549238],[-26.4959815925764,27.8586500996224],[-26.4960959980319,27.8588488138218],[-26.4962344846337,27.8591197786549],[-26.4963007277963,27.8592040793048],[-26.4963970685699,27.859228159552],[-26.4965012145594,27.8592316750019],[-26.4966250008431,27.8592160007179],[-26.4966830044171,27.8591959961983],[-26.4968089994357,27.8591369970748],[-26.496898000842,27.8591660020094],[-26.4970890042541,27.8591609990808],[-26.4973100018551,27.8591190034394],[-26.4975249991793,27.8591130022633],[-26.4976980080566,27.8591070019867],[-26.4978710016454,27.8590290028862],[-26.4981510073631,27.8589460008573],[-26.4984970026345,27.8588919965685],[-26.4987839978832,27.8588380003735],[-26.499009999312,27.8587429968919],[-26.4992970017552,27.8586180001206],[-26.4994340008784,27.8585039975615],[-26.4996070016617,27.8583070019666],[-26.499762001615,27.8581219997305],[-26.4999709986626,27.8580329974249],[-26.500317002028,27.8579730000539],[-26.5005439999056,27.8579609986012],[-26.5008419992588,27.8578950018529],[-26.5010330017716,27.8577349980717],[-26.5012420069131,27.8575910022231],[-26.5016780018383,27.8573409987881],[-26.5018740000849,27.8572030032161],[-26.5019589968102,27.8571440040926],[-26.5021574412129,27.8570048124222],[-26.5023801250427,27.8569602752965],[-26.5026139469761,27.8569157390701],[-26.5029702412836,27.8567598595799],[-26.5032263322294,27.856603980989],[-26.5034211577602,27.856484572605],[-26.5026200030107,27.8556000039371],[-26.5013949959822,27.8542479973473],[-26.5013860018625,27.8542370013365],[-26.5011799986579,27.8540100025596],[-26.5006410061774,27.8533500018012],[-26.5002899998835,27.8529199999581],[-26.4997299974413,27.8520099957648],[-26.497180001256,27.84736999403],[-26.4969185197739,27.846892209408],[-26.4968790008652,27.846819997445],[-26.4940589994232,27.8416660007853],[-26.4904500002672,27.8350699978822],[-26.4907500024106,27.8347500002124],[-26.5000759999075,27.8299639989394],[-26.5003739992606,27.829811000877],[-26.5043360066014,27.8277779997549],[-26.5044299947484,27.8277299957428],[-26.5035010085646,27.8276070008624],[-26.4962729981003,27.8266490007508],[-26.4851899978201,27.8251799995574],[-26.4798780019682,27.8244679973003],[-26.4796206258912,27.8255022041635],[-26.4791702391152,27.8270535346929],[-26.4838930009611,27.8379409980786],[-26.483957049778,27.8380888529183],[-26.4820016610478,27.8391175910041],[-26.4780660901779,27.8411761346709],[-26.4780812662374,27.841214688607],[-26.4781630820605,27.841422544415],[-26.4787437131518,27.8427434794281],[-26.478892002364,27.8430099971137],[-26.4792548590245,27.8436261424326],[-26.479580927118,27.8441575536282],[-26.4800929992925,27.845018997129],[-26.480128516218,27.845138855174],[-26.4801566218306,27.8453062136109],[-26.4801574653947,27.8458220251664],[-26.4791965667681,27.8458220251664],[-26.4787438048827,27.8458057384441],[-26.4784767080336,27.8457894517219],[-26.4778382811118,27.8457601356218],[-26.4775060391724,27.8457536218322],[-26.4764405493918,27.845763864211],[-26.476441094381,27.8458020404319],[-26.4764529996062,27.84663899989],[-26.4768430023026,27.8473399989418],[-26.4774029957516,27.8483889960553],[-26.4779130003846,27.849339001194],[-26.4780629974094,27.8496189979185],[-26.4780890921379,27.8506949171368],[-26.4796890481111,27.8506951977252]]

    area_name = "johannesburg_ward_1"


    # Define number of splits
    # NOTE: 8 is the maximum number os instances to spin-up on GCE, in parallel
    nr_splits = 8

    # Split area
    split_area_equivalent_area(polygon_coords, nr_splits, area_name)


    # Define area
  



    # # Define number of splits
    # # NOTE: 8 is the maximum number os instances to spin-up on GCE, in parallel
    # nr_splits = 12

    # # Split area
    # split_area_equivalent_area(polygon_coords, nr_splits, area_name)

    # polygon_coords = [[9.069425802675344,7.473749622295586],[9.040926314318718,7.473749622295586],[9.040926314318718,7.496146211544437],[9.069425802675344,7.496146211544437],[9.069425802675344,7.473749622295586]]

    # area_name = "abuja_custom19_9"

    # # Define number of splits
    # # NOTE: 8 is the maximum number os instances to spin-up on GCE, in parallel
    # nr_splits = 12

    # # Split area
    # split_area_equivalent_area(polygon_coords, nr_splits, area_name)

